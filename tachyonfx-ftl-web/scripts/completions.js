// TachyonFX Completions
const tfxCompletions = [
    // tachyonFX related completions
    { value: "Duration::from_ms(", score: 1000, meta: "TachyonFX" },
    { value: "Duration::new(", score: 1000, meta: "TachyonFX" },

    // interpolation
    { value: "Interpolation::BackIn"      , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::BackOut"     , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::BackInOut"   , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::BounceIn"    , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::BounceOut"   , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::BounceInOut" , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::CircIn"      , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::CircOut"     , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::CircInOut"   , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::CubicIn"     , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::CubicOut"    , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::CubicInOut"  , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::ElasticIn"   , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::ElasticOut"  , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::ElasticInOut", score: 1000, meta: "Interpolation" },
    { value: "Interpolation::ExpoIn"      , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::ExpoOut"     , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::ExpoInOut"   , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::Linear"      , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::QuadIn"      , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::QuadOut"     , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::QuadInOut"   , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::QuartIn"     , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::QuartOut"    , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::QuartInOut"  , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::QuintIn"     , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::QuintOut"    , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::QuintInOut"  , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::Reverse"     , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::SineIn"      , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::SineOut"     , score: 1000, meta: "Interpolation" },
    { value: "Interpolation::SineInOut"   , score: 1000, meta: "Interpolation" },

    { value: "BackIn"      , score: 700, meta: "Interpolation" },
    { value: "BackOut"     , score: 700, meta: "Interpolation" },
    { value: "BackInOut"   , score: 700, meta: "Interpolation" },
    { value: "BounceIn"    , score: 700, meta: "Interpolation" },
    { value: "BounceOut"   , score: 700, meta: "Interpolation" },
    { value: "BounceInOut" , score: 700, meta: "Interpolation" },
    { value: "CircIn"      , score: 700, meta: "Interpolation" },
    { value: "CircOut"     , score: 700, meta: "Interpolation" },
    { value: "CircInOut"   , score: 700, meta: "Interpolation" },
    { value: "CubicIn"     , score: 700, meta: "Interpolation" },
    { value: "CubicOut"    , score: 700, meta: "Interpolation" },
    { value: "CubicInOut"  , score: 700, meta: "Interpolation" },
    { value: "ElasticIn"   , score: 700, meta: "Interpolation" },
    { value: "ElasticOut"  , score: 700, meta: "Interpolation" },
    { value: "ElasticInOut", score: 700, meta: "Interpolation" },
    { value: "ExpoIn"      , score: 700, meta: "Interpolation" },
    { value: "ExpoOut"     , score: 700, meta: "Interpolation" },
    { value: "ExpoInOut"   , score: 700, meta: "Interpolation" },
    { value: "Linear"      , score: 700, meta: "Interpolation" },
    { value: "QuadIn"      , score: 700, meta: "Interpolation" },
    { value: "QuadOut"     , score: 700, meta: "Interpolation" },
    { value: "QuadInOut"   , score: 700, meta: "Interpolation" },
    { value: "QuartIn"     , score: 700, meta: "Interpolation" },
    { value: "QuartOut"    , score: 700, meta: "Interpolation" },
    { value: "QuartInOut"  , score: 700, meta: "Interpolation" },
    { value: "QuintIn"     , score: 700, meta: "Interpolation" },
    { value: "QuintOut"    , score: 700, meta: "Interpolation" },
    { value: "QuintInOut"  , score: 700, meta: "Interpolation" },
    { value: "Reverse"     , score: 700, meta: "Interpolation" },
    { value: "SineIn"      , score: 700, meta: "Interpolation" },
    { value: "SineOut"     , score: 700, meta: "Interpolation" },
    { value: "SineInOut"   , score: 700, meta: "Interpolation" },

    // color
    { value: "Color::Rgb("   , score: 700, meta: "Color" },
    { value: "Color::from_u32("   , score: 700, meta: "Color" },
    { value: "Color::Indexed("   , score: 700, meta: "Color" },
    { value: "Color::Reset"          , score: 700, meta: "Color" },
    { value: "Color::Black"          , score: 700, meta: "Color" },
    { value: "Color::Red"            , score: 700, meta: "Color" },
    { value: "Color::Green"          , score: 700, meta: "Color" },
    { value: "Color::Yellow"         , score: 700, meta: "Color" },
    { value: "Color::Blue"           , score: 700, meta: "Color" },
    { value: "Color::Magenta"        , score: 700, meta: "Color" },
    { value: "Color::Cyan"           , score: 700, meta: "Color" },
    { value: "Color::Gray"           , score: 700, meta: "Color" },
    { value: "Color::DarkGray"       , score: 700, meta: "Color" },
    { value: "Color::LightRed"       , score: 700, meta: "Color" },
    { value: "Color::LightGreen"     , score: 700, meta: "Color" },
    { value: "Color::LightYellow"    , score: 700, meta: "Color" },
    { value: "Color::LightBlue"      , score: 700, meta: "Color" },
    { value: "Color::LightMagenta"   , score: 700, meta: "Color" },
    { value: "Color::LightCyan"      , score: 700, meta: "Color" },
    { value: "Color::White"          , score: 700, meta: "Color" },

    // constraints
    { value: "Constraint::Length(", score: 800, meta: "Constraint" },
    { value: "Constraint::Percentage(", score: 800, meta: "Constraint" },
    { value: "Constraint::Min(", score: 800, meta: "Constraint" },
    { value: "Constraint::Max(", score: 800, meta: "Constraint" },
    { value: "Constraint::Fill(", score: 800, meta: "Constraint" },
    { value: "Constraint::Ratio(", score: 800, meta: "Constraint" },
    { value: "Length(", score: 400, meta: "Constraint" },
    { value: "Percentage(", score: 400, meta: "Constraint" },
    { value: "Min(", score: 400, meta: "Constraint" },
    { value: "Max(", score: 400, meta: "Constraint" },
    { value: "Fill(", score: 400, meta: "Constraint" },
    { value: "Ratio(", score: 400, meta: "Constraint" },

    // layout
    { value: "Layout::vertical(", score: 800, meta: "Layout" },
    { value: "Layout::horizontal(", score: 800, meta: "Layout" },
    { value: ".horizontal_margin(", score: 500, meta: "Layout" },
    { value: ".vertical_margin(", score: 500, meta: "Layout" },
    { value: ".margin(", score: 500, meta: "Layout" },
    { value: ".spacing(", score: 500, meta: "Layout" },
    { value: ".constraints(", score: 500, meta: "Layout" },

    // motion
    { value: "Motion::LeftToRight", score: 900, meta: "Motion" },
    { value: "Motion::RightToLeft", score: 900, meta: "Motion" },
    { value: "Motion::UpToDown"   , score: 900, meta: "Motion" },
    { value: "Motion::DownToUp"   , score: 900, meta: "Motion" },
    { value: "LeftToRight", score: 900, meta: "Motion" },
    { value: "RightToLeft", score: 900, meta: "Motion" },
    { value: "UpToDown"   , score: 900, meta: "Motion" },
    { value: "DownToUp"   , score: 900, meta: "Motion" },

    // style
    { value: "Style::new()", score: 800, meta: "Style" },
    { value: "Style::default()", score: 800, meta: "Style" },
    { value: ".add_modifier(", score: 700, meta: "Style" },
    { value: ".remove_modifier(", score: 700, meta: "Style" },
    { value: ".fg(", score: 700, meta: "Style" },
    { value: ".bg(", score: 700, meta: "Style" },

    // modifier
    { value: "Modifier::BOLD"        , score: 1000, meta: "Modifier" },
    { value: "Modifier::DIM"         , score: 1000, meta: "Modifier" },
    { value: "Modifier::ITALIC"      , score: 1000, meta: "Modifier" },
    { value: "Modifier::UNDERLINED"  , score: 1000, meta: "Modifier" },
    { value: "Modifier::SLOW_BLINK"  , score: 1000, meta: "Modifier" },
    { value: "Modifier::RAPID_BLINK" , score: 1000, meta: "Modifier" },
    { value: "Modifier::REVERSED"    , score: 1000, meta: "Modifier" },
    { value: "Modifier::HIDDEN"      , score: 1000, meta: "Modifier" },
    { value: "Modifier::CROSSED_OUT" , score: 1000, meta: "Modifier" },
    { value: "BOLD"        , score: 1000, meta: "Modifier" },
    { value: "DIM"         , score: 1000, meta: "Modifier" },
    { value: "ITALIC"      , score: 1000, meta: "Modifier" },
    { value: "UNDERLINED"  , score: 1000, meta: "Modifier" },
    { value: "SLOW_BLINK"  , score: 1000, meta: "Modifier" },
    { value: "RAPID_BLINK" , score: 1000, meta: "Modifier" },
    { value: "REVERSED"    , score: 1000, meta: "Modifier" },
    { value: "HIDDEN"      , score: 1000, meta: "Modifier" },
    { value: "CROSSED_OUT" , score: 1000, meta: "Modifier" },

    // rect
    { value: "Rect::new", score: 800, meta: "Rect" },
    { value: ".clamp(", score: 600, meta: "Rect" },
    { value: ".inner(", score: 600, meta: "Rect" },
    { value: ".intersection(", score: 600, meta: "Rect" },
    { value: ".union(", score: 600, meta: "Rect" },
    { value: ".offset(", score: 600, meta: "Rect" },

    // effect
    { value: ".reversed()", score: 900, meta: "Effect" },
    { value: ".with_area(", score: 900, meta: "Effect" },
    { value: ".with_filter(", score: 900, meta: "Effect" },
    { value: ".with_color_space(", score: 900, meta: "Effect" },

    // color space
    { value: "ColorSpace::Rgp", score: 800, meta: "ColorSpace" },
    { value: "ColorSpace::Hsl", score: 800, meta: "ColorSpace" },
    { value: "ColorSpace::Hsv", score: 800, meta: "ColorSpace" },

    // cell filters
    { value: "All"      , score: 800, meta: "CellFilter" },
    { value: "Area("      , score: 800, meta: "CellFilter" },
    { value: "FgColor("   , score: 800, meta: "CellFilter" },
    { value: "BgColor("   , score: 800, meta: "CellFilter" },
    { value: "Inner("     , score: 800, meta: "CellFilter" },
    { value: "Outer("     , score: 800, meta: "CellFilter" },
    { value: "AllOf(vec![])"     , score: 800, meta: "CellFilter" },
    { value: "AnyOf(vec![])"     , score: 800, meta: "CellFilter" },
    { value: "NoneOf(vec![])"    , score: 800, meta: "CellFilter" },
    { value: "Not(Box::new("       , score: 800, meta: "CellFilter" },
    { value: "Layout("    , score: 800, meta: "CellFilter" },
    { value: "PositionFn(", score: 800, meta: "CellFilter" },
    { value: "EvalCell("  , score: 800, meta: "CellFilter" },
    { value: "Text"  , score: 800, meta: "CellFilter" },
    { value: "CellFilter::All"      , score: 800, meta: "CellFilter" },
    { value: "CellFilter::Area("      , score: 800, meta: "CellFilter" },
    { value: "CellFilter::FgColor("   , score: 800, meta: "CellFilter" },
    { value: "CellFilter::BgColor("   , score: 800, meta: "CellFilter" },
    { value: "CellFilter::Inner("     , score: 800, meta: "CellFilter" },
    { value: "CellFilter::Outer("     , score: 800, meta: "CellFilter" },
    { value: "CellFilter::AllOf(vec![])"     , score: 800, meta: "CellFilter" },
    { value: "CellFilter::AnyOf(vec![])"     , score: 800, meta: "CellFilter" },
    { value: "CellFilter::NoneOf(vec![])"    , score: 800, meta: "CellFilter" },
    { value: "CellFilter::Not(Box::new("       , score: 800, meta: "CellFilter" },
    { value: "CellFilter::Layout("    , score: 800, meta: "CellFilter" },
    { value: "CellFilter::PositionFn(", score: 800, meta: "CellFilter" },
    { value: "CellFilter::EvalCell("  , score: 800, meta: "CellFilter" },
    { value: "CellFilter::Text"      , score: 800, meta: "CellFilter" },

    // effects
    { value: "fx::parallel(&[])",         score: 1000, meta: "Effect" },
    { value: "fx::sequence(&[])",         score: 1000, meta: "Effect" },
    { value: "parallel(&[])",             score: 1000, meta: "Effect" },
    { value: "sequence(&[])",             score: 1000, meta: "Effect" },
    { value: "term256_colors()",          score: 1000, meta: "Effect" },
    { value: "coalesce(",                 score: 1000, meta: "Effect" },
    { value: "coalesce_from(",            score: 1000, meta: "Effect" },
    { value: "consume_tick()",            score: 1000, meta: "Effect" },
    { value: "delay(",                    score: 1000, meta: "Effect" },
    { value: "dissolve(",                 score: 1000, meta: "Effect" },
    { value: "dissolve_to(",              score: 1000, meta: "Effect" },
    { value: "explode(",                  score: 1000, meta: "Effect" },
    { value: "fade_from(",                score: 1000, meta: "Effect" },
    { value: "fade_from_fg(",             score: 1000, meta: "Effect" },
    { value: "fade_to(",                  score: 1000, meta: "Effect" },
    { value: "fade_to_fg(",               score: 1000, meta: "Effect" },
    { value: "hsl_shift(",                score: 1000, meta: "Effect" },
    { value: "hsl_shift_fg(",             score: 1000, meta: "Effect" },
    { value: "never_complete(",           score: 1000, meta: "Effect" },
    { value: "ping_pong(",                score: 1000, meta: "Effect" },
    { value: "prolong_end(",              score: 1000, meta: "Effect" },
    { value: "prolong_start(",            score: 1000, meta: "Effect" },
    { value: "repeat(",                   score: 1000, meta: "Effect" },
    { value: "sleep(",                    score: 1000, meta: "Effect" },
    { value: "repeating(",                score: 1000, meta: "Effect" },
    { value: "slide_in(",                 score: 1000, meta: "Effect" },
    { value: "slide_out(",                score: 1000, meta: "Effect" },
    { value: "sweep_in(",                 score: 1000, meta: "Effect" },
    { value: "sweep_out(",                score: 1000, meta: "Effect" },
    { value: "with_duration(",            score: 1000, meta: "Effect" },
    { value: "timed_never_complete(",     score: 1000, meta: "Effect" },
    { value: "fx::term256_colors()",      score: 1000, meta: "Effect" },
    { value: "fx::coalesce(",             score: 1000, meta: "Effect" },
    { value: "fx::coalesce_from(",        score: 1000, meta: "Effect" },
    { value: "fx::consume_tick()",        score: 1000, meta: "Effect" },
    { value: "fx::delay(",                score: 1000, meta: "Effect" },
    { value: "fx::dissolve(",             score: 1000, meta: "Effect" },
    { value: "fx::dissolve_to(",          score: 1000, meta: "Effect" },
    { value: "fx::explode(",              score: 1000, meta: "Effect" },
    { value: "fx::fade_from(",            score: 1000, meta: "Effect" },
    { value: "fx::fade_from_fg(",         score: 1000, meta: "Effect" },
    { value: "fx::fade_to(",              score: 1000, meta: "Effect" },
    { value: "fx::fade_to_fg(",           score: 1000, meta: "Effect" },
    { value: "fx::hsl_shift(",            score: 1000, meta: "Effect" },
    { value: "fx::hsl_shift_fg(",         score: 1000, meta: "Effect" },
    { value: "fx::never_complete(",       score: 1000, meta: "Effect" },
    { value: "fx::ping_pong(",            score: 1000, meta: "Effect" },
    { value: "fx::prolong_end(",          score: 1000, meta: "Effect" },
    { value: "fx::prolong_start(",        score: 1000, meta: "Effect" },
    { value: "fx::repeat(",               score: 1000, meta: "Effect" },
    { value: "fx::sleep(",                score: 1000, meta: "Effect" },
    { value: "fx::repeating(",            score: 1000, meta: "Effect" },
    { value: "fx::slide_in(",             score: 1000, meta: "Effect" },
    { value: "fx::slide_out(",            score: 1000, meta: "Effect" },
    { value: "fx::sweep_in(",             score: 1000, meta: "Effect" },
    { value: "fx::sweep_out(",            score: 1000, meta: "Effect" },
    { value: "fx::with_duration(",        score: 1000, meta: "Effect" },
    { value: "fx::timed_never_complete(", score: 1000, meta: "Effect" },
];

// custom completer for tachyonfx effect dsl
const tfxCustomCompleter = {
    getCompletions: function(editor, session, pos, prefix, callback) {
        if (!prefix) {
            callback(null, tfxCompletions);
            return;
        }

        const caseSensitiveMatches = tfxCompletions.filter(completion => {
            // check if the value starts with the exact prefix (case-sensitive)
            let value = completion.value;
            return value.startsWith(prefix) ||
                (value.startsWith(".") && value.substring(1).startsWith(prefix));
        });

        callback(null, caseSensitiveMatches);
    }
};

// export the completer so it can be imported in other files
export default tfxCustomCompleter;